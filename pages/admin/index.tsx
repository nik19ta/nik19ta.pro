import React, { useEffect, useState } from "react";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import type { GetStaticProps, InferGetStaticPropsType } from "next";

import { default as LocaleLink } from "next/link";

import styles from "./index.module.css";
import Image from "next/image";

import Storage from "../../utils/storage"
import { useRouter } from 'next/navigation';
import ProgressBar from "../../components/Admin/Progress";
import StatisticVisits from "../../components/Admin/StatisticVisits";

type Props = {
  // Add custom props here
};

export interface ProjectsStatData {
  [key: string]: {
    uuid: string
    count: number
    date: string
  }[]
}

interface Data {
  all: number
  projects: {
    count: number
    id: string
    percent: number
    subtitle: string
    title: string
    url: string
    categories: number[]
    byDays: {
      count: number,
      date: string,
      uuid: string
    }[]
  }[]
  unique: {
    by_days: {
      count: number
      date: string
    }[]
    total: number
  },
  visits: {
    by_days: {
      count: number
      date: string
    }[]
    total: number
  },
  countries: {
    count: number
    country: string
  }[],
}


const Admin: React.FC<InferGetStaticPropsType<typeof getStaticProps>> = (
  _props: InferGetStaticPropsType<typeof getStaticProps>
) => {
  const { t } = useTranslation("admin");

  const { push } = useRouter();
  const token = Storage.get("token")


  const headers = new Headers({
    'Authorization': 'Bearer ' + token,
    'Content-Type': "application/json"
  })

  const [statVisits, setStatVisits] = useState("visits")

  const [load, setLoad] = useState(false)

  const [data, setData] = useState({
    all: 0,
    visits: {
      by_days: [],
      total: 0
    },
    unique: {
      by_days: [],
      total: 0
    },
    countries: [],
    projects: []
  } as Data)

  const loaderProp = ({ src }: { src: any }) => src;

  const getVisits = async () => {
    try {
      fetch(`${process.env.NEXT_PUBLIC_BACK_END}/api/stat/visits`, { headers })
        .then(response => response.json())
        .then(result => setData((prev: any) => ({ ...prev, visits: result.data })))
        .catch(error => console.log('error', error));
    } catch (error: any) {
      push(`/admin/auth`)
      Storage.delete("token")
    }
  }

  const getProjects = async () => {
    try {
      const respProjects = await fetch(`${process.env.NEXT_PUBLIC_BACK_END}/api/projects`, {})
      const jsonProjects = (await respProjects.json()).data

      const respStat = await fetch(`${process.env.NEXT_PUBLIC_BACK_END}/api/stat/projects`, { headers })
      const jsonStat: ProjectsStatData = (await respStat.json()).data


      const projects: any[] = []

      const sumCounts = (jsonData: ProjectsStatData): number => {
        let totalCount = 0;

        for (const key in jsonData) {
          // eslint-disable-next-line no-prototype-builtins
          if (jsonData.hasOwnProperty(key)) {
            const entries = jsonData[key];

            for (const entry of entries) {
              totalCount += entry.count;
            }
          }
        }

        return totalCount;
      }

      const allCount = sumCounts(jsonStat)

      for (let i = 0; i < jsonProjects.length; i++) {
        const elem = jsonProjects[i];
        
        let all = 0
        
        for (let i = 0; i < jsonStat[elem.id].length; i++) {
          const element = jsonStat[elem.id][i];
          all += element.count
        }

          projects.push({ 
            ...elem, 
            count: all, 
            byDays: jsonStat[elem.id],
            percent: (100 / allCount) * all
          })
      }

      setData((prev: any) => ({ ...prev, projects: projects.sort((a, b) => b.count - a.count), all: allCount }))
    } catch (error: any) {
      push(`/admin/auth`)
      Storage.delete("token")
    }
  }

  const getUniqVisits = async () => {
    try {
      fetch(`${process.env.NEXT_PUBLIC_BACK_END}/api/stat/visits/unique`, { headers })
        .then(response => response.json())
        .then(result => setData((prev: any) => ({ ...prev, unique: result.data })))
        .catch(error => console.log('error', error));
    } catch (error) {
      push(`/admin/auth`)
      Storage.delete("token")
    }
  }

  const getStatisticsByCountries = async () => {
    try {
      fetch(`${process.env.NEXT_PUBLIC_BACK_END}/api/stat/countries`, { headers })
        .then(response => response.json())
        .then(result => setData((prev: any) => ({ ...prev, countries: result.data.sort((a: any, b: any) => b.count - a.count) })))
        .catch(error => console.log('error', error));
    } catch (error) {
      push(`/admin/auth`)
      Storage.delete("token")
    }
  }


  const init = async () => {
    getVisits()
    getUniqVisits()
    getProjects()
    getStatisticsByCountries()
  }

  console.log(data);

  useEffect(() => {

    if (!token) {
      push(`/admin/auth`)
    } else {
      init()
      setLoad(true)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [push])

  const langs = [
    {locale: "en", img: "ðŸ‡ºðŸ‡¸"},
    {locale: "jp", img: "ðŸ‡¯ðŸ‡µ"},
    {locale: "zh", img: "ðŸ‡¨ðŸ‡³"},
    {locale: "hi", img: "ðŸ‡®ðŸ‡³"},
    {locale: "ru", img: "ðŸ‡·ðŸ‡º"},
    {locale: "de", img: "ðŸ‡©ðŸ‡ª"},
    {locale: "fr", img: "ðŸ‡«ðŸ‡·"},
    {locale: "es", img: "ðŸ‡®ðŸ‡¹"},
    {locale: "kk", img: "ðŸ‡°ðŸ‡¿"},
  ]

  const flags: { [key: string]: string } = {
    DZ: "ðŸ‡©ðŸ‡¿", BR: "ðŸ‡§ðŸ‡·", CZ: "ðŸ‡¨ðŸ‡¿", GD: "ðŸ‡¬ðŸ‡©", KI: "ðŸ‡°ðŸ‡®", MX: "ðŸ‡²ðŸ‡½", PK: "ðŸ‡µðŸ‡°", SC: "ðŸ‡¸ðŸ‡¨", TG: "ðŸ‡¹ðŸ‡¬",
    AD: "ðŸ‡¦ðŸ‡©", BN: "ðŸ‡§ðŸ‡³", DK: "ðŸ‡©ðŸ‡°", GT: "ðŸ‡¬ðŸ‡¹", KW: "ðŸ‡°ðŸ‡¼", FM: "ðŸ‡«ðŸ‡²", PW: "ðŸ‡µðŸ‡¼", SL: "ðŸ‡¸ðŸ‡±", TO: "ðŸ‡¹ðŸ‡´",
    AO: "ðŸ‡¦ðŸ‡´", BG: "ðŸ‡§ðŸ‡¬", DJ: "ðŸ‡©ðŸ‡¯", GN: "ðŸ‡¬ðŸ‡³", KG: "ðŸ‡°ðŸ‡¬", MD: "ðŸ‡²ðŸ‡©", PA: "ðŸ‡µðŸ‡¦", SG: "ðŸ‡¸ðŸ‡¬", TT: "ðŸ‡¹ðŸ‡¹",
    AG: "ðŸ‡¦ðŸ‡¬", BF: "ðŸ‡§ðŸ‡«", DM: "ðŸ‡©ðŸ‡²", GW: "ðŸ‡¬ðŸ‡¼", LA: "ðŸ‡±ðŸ‡¦", MC: "ðŸ‡²ðŸ‡¨", PG: "ðŸ‡µðŸ‡¬", SK: "ðŸ‡¸ðŸ‡°", TN: "ðŸ‡¹ðŸ‡³",
    AR: "ðŸ‡¦ðŸ‡·", BI: "ðŸ‡§ðŸ‡®", DO: "ðŸ‡©ðŸ‡´", GY: "ðŸ‡¬ðŸ‡¾", LV: "ðŸ‡±ðŸ‡»", MN: "ðŸ‡²ðŸ‡³", PY: "ðŸ‡µðŸ‡¾", SI: "ðŸ‡¸ðŸ‡®", TR: "ðŸ‡¹ðŸ‡·",
    AM: "ðŸ‡¦ðŸ‡²", KH: "ðŸ‡°ðŸ‡­", EC: "ðŸ‡ªðŸ‡¨", HT: "ðŸ‡­ðŸ‡¹", LB: "ðŸ‡±ðŸ‡§", ME: "ðŸ‡²ðŸ‡ª", PH: "ðŸ‡µðŸ‡­", SB: "ðŸ‡¸ðŸ‡§", TM: "ðŸ‡¹ðŸ‡²",
    AU: "ðŸ‡¦ðŸ‡º", CM: "ðŸ‡¨ðŸ‡²", EG: "ðŸ‡ªðŸ‡¬", HN: "ðŸ‡­ðŸ‡³", LS: "ðŸ‡±ðŸ‡¸", MA: "ðŸ‡²ðŸ‡¦", PL: "ðŸ‡µðŸ‡±", SO: "ðŸ‡¸ðŸ‡´", TV: "ðŸ‡¹ðŸ‡»",
    AT: "ðŸ‡¦ðŸ‡¹", CA: "ðŸ‡¨ðŸ‡¦", SV: "ðŸ‡¸ðŸ‡»", HU: "ðŸ‡­ðŸ‡º", LR: "ðŸ‡±ðŸ‡·", MZ: "ðŸ‡²ðŸ‡¿", PT: "ðŸ‡µðŸ‡¹", ZA: "ðŸ‡¿ðŸ‡¦", UG: "ðŸ‡ºðŸ‡¬",
    AZ: "ðŸ‡¦ðŸ‡¿", CV: "ðŸ‡¨ðŸ‡»", GQ: "ðŸ‡¬ðŸ‡¶", IS: "ðŸ‡®ðŸ‡¸", LY: "ðŸ‡±ðŸ‡¾", MM: "ðŸ‡²ðŸ‡²", QA: "ðŸ‡¶ðŸ‡¦", KR: "ðŸ‡°ðŸ‡·", UA: "ðŸ‡ºðŸ‡¦",
    BS: "ðŸ‡§ðŸ‡¸", CF: "ðŸ‡¨ðŸ‡«", ER: "ðŸ‡ªðŸ‡·", IN: "ðŸ‡®ðŸ‡³", LI: "ðŸ‡±ðŸ‡®", NA: "ðŸ‡³ðŸ‡¦", RO: "ðŸ‡·ðŸ‡´", SS: "ðŸ‡¸ðŸ‡¸", AE: "ðŸ‡¦ðŸ‡ª",
    BH: "ðŸ‡§ðŸ‡­", TD: "ðŸ‡¹ðŸ‡©", EE: "ðŸ‡ªðŸ‡ª", ID: "ðŸ‡®ðŸ‡©", LT: "ðŸ‡±ðŸ‡¹", NR: "ðŸ‡³ðŸ‡·", RU: "ðŸ‡·ðŸ‡º", ES: "ðŸ‡ªðŸ‡¸", GB: "ðŸ‡¬ðŸ‡§",
    BD: "ðŸ‡§ðŸ‡©", CL: "ðŸ‡¨ðŸ‡±", ET: "ðŸ‡ªðŸ‡¹", IR: "ðŸ‡®ðŸ‡·", LU: "ðŸ‡±ðŸ‡º", NP: "ðŸ‡³ðŸ‡µ", RW: "ðŸ‡·ðŸ‡¼", LK: "ðŸ‡±ðŸ‡°", US: "ðŸ‡ºðŸ‡¸",
    BB: "ðŸ‡§ðŸ‡§", CN: "ðŸ‡¨ðŸ‡³", FJ: "ðŸ‡«ðŸ‡¯", IQ: "ðŸ‡®ðŸ‡¶", MG: "ðŸ‡²ðŸ‡¬", NL: "ðŸ‡³ðŸ‡±", KN: "ðŸ‡°ðŸ‡³", SD: "ðŸ‡¸ðŸ‡©", UY: "ðŸ‡ºðŸ‡¾",
    BY: "ðŸ‡§ðŸ‡¾", CO: "ðŸ‡¨ðŸ‡´", FI: "ðŸ‡«ðŸ‡®", IE: "ðŸ‡®ðŸ‡ª", MW: "ðŸ‡²ðŸ‡¼", NZ: "ðŸ‡³ðŸ‡¿", LC: "ðŸ‡±ðŸ‡¨", SR: "ðŸ‡¸ðŸ‡·", UZ: "ðŸ‡ºðŸ‡¿",
    BE: "ðŸ‡§ðŸ‡ª", KM: "ðŸ‡°ðŸ‡²", FR: "ðŸ‡«ðŸ‡·", IL: "ðŸ‡®ðŸ‡±", MY: "ðŸ‡²ðŸ‡¾", NI: "ðŸ‡³ðŸ‡®", VC: "ðŸ‡»ðŸ‡¨", SZ: "ðŸ‡¸ðŸ‡¿", VU: "ðŸ‡»ðŸ‡º",
    BZ: "ðŸ‡§ðŸ‡¿", CG: "ðŸ‡¨ðŸ‡¬", GA: "ðŸ‡¬ðŸ‡¦", IT: "ðŸ‡®ðŸ‡¹", MV: "ðŸ‡²ðŸ‡»", NE: "ðŸ‡³ðŸ‡ª", WS: "ðŸ‡¼ðŸ‡¸", SE: "ðŸ‡¸ðŸ‡ª", VE: "ðŸ‡»ðŸ‡ª",
    BJ: "ðŸ‡§ðŸ‡¯", CD: "ðŸ‡¨ðŸ‡©", GM: "ðŸ‡¬ðŸ‡²", JM: "ðŸ‡¯ðŸ‡²", ML: "ðŸ‡²ðŸ‡±", NG: "ðŸ‡³ðŸ‡¬", SM: "ðŸ‡¸ðŸ‡²", CH: "ðŸ‡¨ðŸ‡­", VN: "ðŸ‡»ðŸ‡³",
    BT: "ðŸ‡§ðŸ‡¹", CR: "ðŸ‡¨ðŸ‡·", GE: "ðŸ‡¬ðŸ‡ª", JP: "ðŸ‡¯ðŸ‡µ", MT: "ðŸ‡²ðŸ‡¹", KP: "ðŸ‡°ðŸ‡µ", ST: "ðŸ‡¸ðŸ‡¹", SY: "ðŸ‡¸ðŸ‡¾", YE: "ðŸ‡¾ðŸ‡ª",
    BO: "ðŸ‡§ðŸ‡´", HR: "ðŸ‡­ðŸ‡·", DE: "ðŸ‡©ðŸ‡ª", JO: "ðŸ‡¯ðŸ‡´", MH: "ðŸ‡²ðŸ‡­", MK: "ðŸ‡²ðŸ‡°", SA: "ðŸ‡¸ðŸ‡¦", TJ: "ðŸ‡¹ðŸ‡¯", ZM: "ðŸ‡¿ðŸ‡²",
    BA: "ðŸ‡§ðŸ‡¦", CU: "ðŸ‡¨ðŸ‡º", GH: "ðŸ‡¬ðŸ‡­", KZ: "ðŸ‡°ðŸ‡¿", MR: "ðŸ‡²ðŸ‡·", NO: "ðŸ‡³ðŸ‡´", SN: "ðŸ‡¸ðŸ‡³", TZ: "ðŸ‡¹ðŸ‡¿", ZW: "ðŸ‡¿ðŸ‡¼",
    BW: "ðŸ‡§ðŸ‡¼", CY: "ðŸ‡¨ðŸ‡¾", GR: "ðŸ‡¬ðŸ‡·", KE: "ðŸ‡°ðŸ‡ª", MU: "ðŸ‡²ðŸ‡º", OM: "ðŸ‡´ðŸ‡²", RS: "ðŸ‡·ðŸ‡¸", TH: "ðŸ‡¹ðŸ‡­", PE: "ðŸ‡µðŸ‡ª",
    AF: "ðŸ‡¦ðŸ‡«", AL: "ðŸ‡¦ðŸ‡±",
  }

  const getFlag = (country: string): string => {
    return flags[country] ? flags[country] : country
  }

  return (
    load === true ? <div className={styles.main} >
      <header className={styles.header} >
        <div className={styles.container} >
          <p className={styles.header_title} >ADMIN</p>

          <div className={styles.lang} >
            {langs.map(lang => 
              <LocaleLink 
                key={lang.locale} 
                className={styles.language_switch__item} 
                href="/admin" 
                locale={lang.locale} 
              > 
              {lang.img} 
              </LocaleLink>)}
          </div>
        </div>
      </header>

      <main className={styles.content} >
        <p className={styles.selection_title} >{t("general_site_statistics")}</p>
        <div className={styles.line} >
          <div className={styles.card}>
            <div className={styles.card_count_container} >
              <div className={styles.card_count} >{data.visits.total}</div>
              <div className={styles.card_title} >{t("visits")}</div>
            </div>

            <div className={styles.card_progress} >
              <div className={styles.card_progress__nums} >
                <span className={styles.card_progress__num} >0%</span>
                <span className={styles.card_progress__num} >100%</span>
              </div>

              <div className={styles.card_progress__line} >
                <div style={{ width: 100 / Math.max(data.visits.total, data.unique.total) * data.visits.total + "%" }} className={styles.card_progress__line_fill} ></div>
              </div>
            </div>
          </div>
          <div className={styles.card} >
            <div className={styles.card_count_container} >
              <div className={styles.card_count} >{data.unique.total}</div>
              <div className={styles.card_title} >{(t("unique_visits"))}</div>
            </div>

            <div className={styles.card_progress} >
              <div className={styles.card_progress__nums} >
                <span className={styles.card_progress__num} >0%</span>
                <span className={styles.card_progress__num} >100%</span>
              </div>
              <div className={styles.card_progress__line} >
                <div
                  style={{ width: 100 / Math.max(data.visits.total, data.unique.total) * data.unique.total + "%" }}
                  className={styles.card_progress__line_fill} />
              </div>
            </div>
          </div>

          <StatisticVisits 
            setStatVisits={setStatVisits}
            days={statVisits === "visits" ? data.visits.by_days : data.unique.by_days} />
        </div>
        <div className={styles.line} >
          <div className={styles.card_full} >
            <p className={styles.card_title} >Top countries</p>
            <div className={styles.country_container} >
              {data.countries.map(country =>
                <div key={country.country} className={styles.country_line} >
                  {getFlag(country.country)} <span className={styles.country_line_count} >{country.count}</span>
                </div>
              )}
            </div>
          </div>
        </div>
        <p className={styles.selection_title} >{t("projects_statistics")}</p>
        <div className={styles.cards} >
          {data.projects ? data.projects.map((item: any) =>
            <div key={item.id} className={styles.project_card} >
              <Image
                className={styles.project_card_image}
                loader={loaderProp}
                width="160"
                height="120"
                src={`${process.env.NEXT_PUBLIC_BASE_URL_IMAGE}/${item.url}`}
                alt={`photo`}
              />

              <div className={styles.description} >
                <p>
                  <span className={styles.description_count} >{item.count}</span>
                  <span className={styles.description_subcount} >{item.percent.toFixed(1)}%</span>
                </p>
                <span className={styles.project_title} >{item.title}</span>

                <ProgressBar
                  fs={data.all}
                  sc={item.count}
                  style={{
                    width: "calc(100% + 20px)",
                    marginLeft: "-12px",
                    marginTop: "49px"
                  }} />
              </div>
            </div>) : <></>}
        </div>
      </main>
    </div> : <div></div>
  );
};

export const getStaticProps: GetStaticProps<Props> = async ({ locale }) => ({
  props: { ...(await serverSideTranslations(locale ?? "en", ["admin"])) },
});

export default Admin;
